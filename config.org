#+TLE: David's Emacs Configuration
#+STARTUP: hideblocks
#+PROPERTY: header-args :tangle yes

* Initialisation
** Custom file (load custom file)
   #+begin_src emacs-lisp
    (setq custom-file (concat user-emacs-directory "custom.el"))
    (when (file-exists-p custom-file)
      (load custom-file))
   #+end_src

** Packages (init packages repositories)
   Initialize packages and provide the very useful =use-package= function, who installs the package from the repositories if it doesn't exist :ensure t.
   #+begin_src emacs-lisp
     (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                              ("org" . "http://orgmode.org/elpa/")
                              ; ("marmalade" . "http://marmalade-repo.org/packages/")
                              ("gnu" . "http://elpa.gnu.org/packages/")))
     (setq package-enable-at-startup nil)

     ;; ZOMG C'ETAIS TELLEMENT FUCKING EASY - RIEN NE MARCHE SANS CE TRUC
     (package-initialize)
   #+end_src
** Util (lisp functions)
   Some cleanup should be done... I'm not sure I use any of these functions.
  #+begin_src emacs-lisp
   (if (fboundp 'with-eval-after-load)
       (defmacro after (feature &rest body)
         "After FEATURE is loaded, evaluate BODY."
         (declare (indent defun))
         `(with-eval-after-load ,feature ,@body))
     (defmacro after (feature &rest body)
       "After FEATURE is loaded, evaluate BODY."
       (declare (indent defun))
       `(eval-after-load ,feature
          '(progn ,@body))))


   (defun my-recompile-init ()
     "Byte-compile all your dotfiles again."
     (interactive)
     (byte-recompile-directory (concat user-emacs-directory "config") 0))


   (defun my-window-killer ()
     "closes the window, and deletes the buffer if it's the last window open."
     (interactive)
     (if (> buffer-display-count 1)
         (if (= (length (window-list)) 1)
             (kill-buffer)
           (delete-window))
       (kill-buffer-and-window)))


   (defun my-minibuffer-keyboard-quit ()
     "Abort recursive edit.
   In Delete Selection mode, if the mark is active, just deactivate it;
   then it takes a second \\[keyboard-quit] to abort the minibuffer."
     (interactive)
     (if (and delete-selection-mode transient-mark-mode mark-active)
         (setq deactivate-mark t)
       (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
       (abort-recursive-edit)))


   (defun set-transparency (alpha)
     "Sets the transparency of the current frame."
     (interactive "nAlpha: ")
     (set-frame-parameter nil 'alpha alpha))


   (defun my-google ()
     "Google the selected region if any, display a query prompt otherwise."
     (interactive)
     (browse-url
      (concat
       "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
       (url-hexify-string (if mark-active
                              (buffer-substring (region-beginning) (region-end))
                            (read-string "Search Google: "))))))


   (defun my-copy-file-name-to-clipboard ()
     "Copy the current buffer file name to the clipboard."
     (interactive)
     (let ((filename (if (equal major-mode 'dired-mode)
                         default-directory
                       (buffer-file-name))))
       (when filename
         (kill-new filename)
         (message "Copied buffer file name '%s' to the clipboard." filename))))


   (defun my-eval-and-replace ()
     "Replace the preceding sexp with its value."
     (interactive)
     (let ((value (eval (preceding-sexp))))
       (backware-kill-sexp)
       (insert (format "%s" value))))


   (defun my-rename-current-buffer-file ()
     "Renames current buffer and file it is visiting."
     (interactive)
     (let ((filename (buffer-file-name)))
       (if (not (and filename (file-exists-p filename)))
           (message "Buffer is not visiting a file!")
         (let ((new-name (read-file-name "New name: " filename)))
           (cond
            ((vc-backend filename) (vc-rename-file filename new-name))
            (t
             (rename-file filename new-name t)
             (set-visited-file-name new-name t t)))))))


   (defun my-delete-current-buffer-file ()
     "Kill the current buffer and deletes the file it is visiting."
     (interactive)
     (let ((filename (buffer-file-name)))
       (when filename
         (if (vc-backend filename)
             (vc-delete-file filename)
           (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
             (delete-file filename)
             (message "Deleted file %s" filename)
             (kill-buffer))))))


   (defun my-goto-scratch-buffer ()
     "Create a new scratch buffer."
     (interactive)
     (switch-to-buffer (get-buffer-create "*scratch*"))
     (emacs-lisp-mode))


   (defun my-insert-last-kbd-macro ()
     (interactive)
     (name-last-kbd-macro 'my-last-macro)
     (insert-kbd-macro 'my-last-macro))




#+end_src

** Macro
  #+begin_src emacs-lisp

(add-to-list 'load-path (concat user-emacs-directory "elisp"))
(require 'macro)

;;;;;;;;;;;;;;;;;;;;;;
;; Save Macro Function
;;;;;;;;;;;;;;;;;;;;;;

(defun save-macro (name)
  "save a macro. Take a name as argument
     and save the last defined macro under
     this name at the end of init-macro.el"
  (interactive "SName of the macro :")  ; ask for the name of the macro
  (kmacro-name-last-macro name)         ; use this name for the macro
  (find-file (concat user-emacs-directory "elisp/macro.el"))            ; open ~/.emacs or other user init file
  (goto-char (point-min))               ; go to the end of the .emacs
  (insert-kbd-macro name)               ; copy the macro
  (newline)                             ; insert a newline
  (newline)                             ; insert a newline
  (newline)                             ; insert a newline
  (switch-to-buffer nil))               ; return to the initial buffer
#+end_src

** Hyper key
#+begin_src emacs-lisp
(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
#+end_src

* Plugins
** abo-abo
#+begin_src emacs-lisp :tangle yes
  (use-package swiper
    :ensure t
    :pin melpa
    )

  (use-package counsel
    :ensure t
    :pin melpa
    :bind ("M-x" . counsel-M-x)
    )

#+end_src
** Hydra
#+begin_src emacs-lisp :tangle yes
    (use-package hydra :ensure t)

    (defhydra hydra-yasnippet (:color blue :hint nil)
      "
                  ^YASnippets^
    --------------------------------------------
      Modes:    Load/Visit:    Actions:

     _g_lobal  _d_irectory    _i_nsert
     _m_inor   _f_ile         _t_ryout
     _e_xtra   _l_ist         _n_ew
             _a_ll
    "
      ("d" yas-load-directory)
      ("e" yas-activate-extra-mode)
      ("i" yas-insert-snippet)
      ("f" yas-visit-snippet-file :color blue)
      ("n" yas-new-snippet)
      ("t" yas-tryout-snippet)
      ("l" yas-describe-tables)
      ("g" yas/global-mode)
      ("m" yas/minor-mode)
      ("a" yas-reload-all))

  (defhydra hydra-winner (global-map "C-c")
    "Winner"
    ("<left>" (progn
           (winner-undo)
           (setq this-command 'winner-undo))
         "back")
    ("<right>" winner-redo "forward"
         ))
#+end_src
** Avy
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :bind ("M-c" . avy-goto-char-2)
    :config
    (setq avy-keys (number-sequence ?a ?z)))
#+end_src
** Pretty symbols
#+begin_src emacs-lisp :tangle yes
  (if (fboundp 'global-prettify-symbols-mode)
      (progn
        (global-prettify-symbols-mode)
        (add-hook 'js2-mode-hook
                  (lambda ()
                    (push '("function" . 955) prettify-symbols-alist)
                    (push '("return" . 8592) prettify-symbols-alist))))

    (progn
      (use-package pretty-symbols :ensure t)
      (require 'pretty-symbols)
      (diminish 'pretty-symbols-mode)
      (add-to-list 'pretty-symbol-categories 'js)
      (add-to-list 'pretty-symbol-patterns '(955 js "\\<function\\>" (js2-mode)))
      (add-to-list 'pretty-symbol-patterns '(8592 js "\\<return\\>" (js2-mode)))
      (add-hook 'find-file-hook 'pretty-symbols-mode)))
#+end_src

** Indent Guide
#+begin_src emacs-lisp :tangle yes
    (use-package indent-guide :ensure t)
    (require 'indent-guide)
#+end_src

** Anzu
#+begin_src emacs-lisp :tangle yes
  (use-package anzu
    :ensure t
    
    :config
    (setq anzu-cons-mode-line-p nil)
    (global-anzu-mode 1)
    )

#+end_src

** COMMENT Direx
#+begin_src emacs-lisp :tangle yes
(require 'direx)
(bind-key "C-x C-j" 'direx:jump-to-directory)

#+end_src

** Expand Region
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region :ensure t)
  (require 'expand-region)
#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
    ;; Magit Mode

  (setq magit-last-seen-setup-instructions "1.4.0")
(bind-key "C-x g" #'magit-status)


(after 'magit (progn
  (define-key magit-diff-mode-map (kbd "C-M-1") 'magit-show-level-1-all)
  (define-key magit-diff-mode-map (kbd "C-M-2") 'magit-show-level-2-all)
  (define-key magit-diff-mode-map (kbd "C-M-3") 'magit-show-level-3-all)
  (define-key magit-diff-mode-map (kbd "C-M-4") 'magit-show-level-4-all)))


#+end_src

** Multiple Cursors
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors :ensure t)
  (require 'multiple-cursors)
#+end_src

** Iy go to char
#+begin_src emacs-lisp :tangle yes
  (use-package iy-go-to-char :ensure t)
  (require 'iy-go-to-char)
  (add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
#+end_src

** Helm

*** Misc
   #+begin_src emacs-lisp
         (require 'helm-config)
         ;; (setq helm-command-prefix-key "C-c h")
         (setq helm-quick-update t)
         (setq helm-bookmark-show-location t)
         (setq helm-buffers-fuzzy-matching t)
         (customize-set-variable 'helm-truncate-lines t)

         (use-package helm :ensure t)
         (use-package helm-swoop :ensure t)

         ; (helm-mode 1)

         (use-package wgrep-helm :ensure t)
         ;; (require 'wgrep-helm)

        ;; (defadvice helm-mini (before winner-skip-helm activate)
        ;;   (winner-mode -1))
        ;; (defadvice helm-mini (after winner-skip-helm activate)
        ;;   (winner-mode 1))

        ;; (defadvice helm-projectile (before winner-skip-helm activate)
        ;;   (winner-mode -1))
        ;; (defadvice helm-projectile (after winner-skip-helm activate)
        ;;   (winner-mode 1))

         (customize-set-variable 'helm-boring-buffer-regexp-list
                                 (quote
                                  ("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "^\\*")))
         (customize-set-variable 'helm-buffer-max-length 30)
         (customize-set-variable 'helm-candidate-number-limit 200)

         (setq helm-M-x-fuzzy-match t)
     (bind-key "C-c x" 'helm-M-x)

         (bind-key "C-z" 'helm-mini)

         (bind-key "C-t" 'helm-imenu)
         (bind-key "M-t" 'helm-etags-select)
         (bind-key "C-M-t" 'projectile-regenerate-tags)

         ;; Occur
         (bind-key "M-o" 'helm-occur)
         (bind-key "C-M-o" 'helm-multi-occur)

         ;; helm-etags
         ;; (bind-key "M-t" 'helm-etags-select)

         ;; (bind-key "<f2>" 'helm-all-mark-rings)
         (bind-key "s-y" 'helm-show-kill-ring)

         ;; BOOKMARKS
         (bind-key "s-b" 'helm-bookmarks)

         (bind-key "s-o" 'helm-swoop)
         ;; (bind-key "s-O" 'helm-multi-swoop)
         ;; (bind-key "s-o" 'helm-occur)

         ;; (bind-key "s-O" 'helm-regexp)

#+end_src

*** Helm Ag
#+begin_src emacs-lisp :tangle yes
(use-package helm-ag :ensure t)
(setq helm-ag-thing-at-point 'symbol)
(defun helm-ag-projectile ()
  (interactive)
  (helm-ag (projectile-project-root)))

 (customize-set-variable 'helm-ag-base-command "ag")
 (customize-set-variable 'helm-ag-command-option
   "--nocolor --nogroup --ignore-dir node_modules --ignore-dir elpa")
#+end_src

*** Helm Dash
    #+begin_src emacs-lisp :tangle yes
      (setq helm-dash-browser-func 'browse-url)
      ;; (setq helm-dash-browser-func 'eww)
#+end_src

*** Helm-Spaces
#+begin_src emacs-lisp :tangle yes
   (bind-key "M-s" 'helm-spaces) ; (key-chord-define-global "e3" 'helm-spaces)
#+end_src

** Projectile
#+begin_src emacs-lisp :tangle yes
  (projectile-global-mode t)
  (customize-set-variable 'projectile-globally-ignored-directories
                          (quote
                           (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" "build" "node_modules" "elpa")))
  (customize-set-variable 'projectile-remember-window-configs nil)
  (customize-set-variable 'projectile-completion-system 'ivy)
  (customize-set-variable 'projectile-switch-project-action (quote projectile-dired))
  (customize-set-variable 'projectile-tags-command "find . -type f -not -iwholename '*TAGS' -not -size +16k | ctags -f %s %s -e -L -")

#+end_src

*** Helm Projectile
#+begin_src emacs-lisp :tangle yes
(after 'projectile
  (use-package helm-projectile) :ensure t)

  (customize-set-variable 'helm-projectile-sources-list '(helm-source-projectile-buffers-list
                                                          helm-source-projectile-files-list
                                                          helm-source-projectile-recentf-list))

    (bind-key "M-z" 'helm-projectile)
    (bind-key "s-f" 'helm-projectile)
    (bind-key "s-g" 'helm-ag-projectile)

#+end_src

** Key Chords
#+begin_src emacs-lisp :tangle yes
(key-chord-mode t)
#+end_src

** Company
   #+begin_src emacs-lisp
     (use-package company :ensure t)
     (require 'company)

     (setq company-idle-delay 0)

     (defun company-auto-completion-toggle ()
       (interactive)
       (if (eq company-idle-delay 0)
           (setq company-idle-delay nil)
         (setq company-idle-delay 0))
       (message (format "company-idle-delay : %s" company-idle-delay)))

     (bind-key "C-M-c" 'company-auto-completion-toggle)

     (setq company-minimum-prefix-length 1)
     (setq company-show-numbers 1)
     (setq company-tooltip-limit 10)

     (setq company-dabbrev-downcase nil)
     (setq company-dabbrev-ignore-case nil)

     (customize-set-variable 'company-dabbrev-char-regexp "[a-zA-Z0-9-_]")
     (customize-set-variable 'company-selection-wrap-around t)


     (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
     (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
     (set-face-attribute 'company-preview nil :background "black")
     (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
     (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
     (set-face-attribute 'company-scrollbar-fg nil :background "gray40")

     (when (executable-find "tern")
       (after "company-tern-autoloads"
         (add-to-list 'company-backends 'company-tern)))
     (add-to-list 'company-backends 'company-tern)

     (setq company-global-modes
           '(not
             eshell-mode comint-mode org-mode))


     (bind-key "C-o" 'company-manual-begin)
     (bind-key "M-o" 'company-tern)
     (bind-key "M-?" 'company-dabbrev)

     (defadvice company-complete-common (around advice-for-company-complete-common activate)
       (when (null (yas-expand))
         ad-do-it))

     (add-hook 'after-init-hook 'global-company-mode)



#+end_src

** Yasnippet
   #+begin_src emacs-lisp
;;;;;;;;;;;;
;; yasnippet
;;;;;;;;;;;;

(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"))

(use-package yasnippet :ensure t)
(require 'yasnippet)

(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "C-<tab>") 'yas-expand)
(define-key yas-minor-mode-map (kbd "C-c TAB") 'yas-insert-snippet)

(yas-global-mode 1)




#+end_src

** Smartparens
   #+begin_src emacs-lisp

     (use-package smartparens 
       :ensure t
       :config

       (setq sp-show-pair-delay 0)
       (setq sp-show-pair-from-inside 1) ;; Shows two pair of parenthesis when used with show-paren-mode

       (setq sp-autoescape-string-quote nil)
       (setq sp-autoinsert-if-followed-by-same 1)
       (setq sp-highlight-pair-overlay nil)

       (sp-use-smartparens-bindings)
       (smartparens-global-mode t)
       (smartparens-global-strict-mode nil)

       (show-smartparens-global-mode t)
       (show-paren-mode 1)

       (sp-pair "`" nil :actions :rem)

       (sp-with-modes sp--lisp-modes
         (sp-local-pair "'" nil :actions nil)
         )

       (define-key sp-keymap (kbd "M-<right>") 'sp-forward-slurp-sexp)
       (define-key sp-keymap (kbd "M-<left>") 'sp-forward-barf-sexp)
       (define-key sp-keymap (kbd "C-<right>") 'nil)
       (define-key sp-keymap (kbd "C-<left>") 'nil)
       ;; (define-key sp-keymap "`" 'nil)
       ;; (define-key sp-keymap 96 'nil)

       ;; (define-key smartparens-strict-mode-map [remap kill-line] 'nil)
       ;; (define-key smartparens-strict-mode-map (kbd "M-k") 'sp-kill-hybrid-sexp)
       (define-key smartparens-strict-mode-map [remap kill-line] 'sp-kill-hybrid-sexp)

       ;; fix conflict where smartparens clobbers yas' key bindings
       (after 'yasnippet
         (defadvice yas-expand (before advice-for-yas-expand activate)
           (sp-remove-active-pair-overlay)))

       (defadvice sp-kill-hybrid-sexp (before kill-line-cleanup-whitespace activate)
         "cleanup whitespace on sp-kill-hybrid-sexp"
         (if (bolp)
             (delete-region (point) (progn (skip-chars-forward " \t") (point)))))

       (customize-set-variable 'sp-hybrid-kill-excessive-whitespace nil)
       (customize-set-variable 'sp-ignore-modes-list (quote (minibuffer-inactive-mode)))
       (customize-set-variable 'sp-show-pair-from-inside t)
       (customize-set-variable 'sp-successive-kill-preserve-whitespace 2)  
       
     )



#+end_src

** Undo-tree
   #+begin_src emacs-lisp :tangle yes
     ;;==========
     ;; Undo tree
     ;;==========

     (use-package undo-tree :ensure t)
     (require 'undo-tree)
     (global-undo-tree-mode)
     ;; Unmap 'C-x r' to avoid conflict with discover
     (after 'undo-tree
       (define-key undo-tree-map (kbd "C-x r") nil))

     (define-key undo-tree-map (kbd "C-/") 'nil)


#+end_src

** Flycheck
   #+begin_src emacs-lisp :tangle yes
(use-package flycheck :ensure t)
(add-hook 'after-init-hook #'global-flycheck-mode)

(customize-set-variable 'flycheck-disabled-checkers (quote (emacs-lisp-checkdoc)))
(customize-set-variable 'flycheck-idle-change-delay 0.5)

#+end_src

** Diminish - clean.wrapper
  #page-products-list
    .content-wrapper. your modeline
   #+begin_src emacs-lisp :tangle yes
;; For a cleaner modeline
(use-package diminish :ensure t)
(diminish 'visual-line-mode)
(after 'autopair (diminish 'autopair-mode))
(after 'js2 (diminish 'Javascript-IDE))
(after 'js2r (diminish 'js2r-mode))
(after 'skewer (diminish 'skewer-mode))
(after 'undo-tree (diminish 'undo-tree-mode))
(after 'auto-complete (diminish 'auto-complete-mode))
;(after 'projectile (diminish 'projectile-mode))
(after 'yasnippet (diminish 'yas-minor-mode))
(after 'guide-key (diminish 'guide-key-mode))
(after 'eldoc (diminish 'eldoc-mode))
(after 'smartparens (diminish 'smartparens-mode))
(after 'elisp-slime-nav (diminish 'elisp-slime-nav-mode))
(after 'git-gutter+ (diminish 'git-gutter+-mode))
;; (after 'helm (diminish 'helm-mode))
(after 'anzu (diminish 'anzu-mode))
(after 'skewer (diminish 'skewer-mode))
(after 'tern (diminish 'tern-mode))
;; (after 'company (diminish 'company-mode))
#+end_src

** Tramp
#+begin_src emacs-lisp :tangle yes
   (require 'tramp)
   (setq tramp-backup-directory-alist `(("." . "~/.saves_tramp")))
  (setq tramp-default-method "sshx")

(setq password-cache-expiry 'nil)

   ;; (add-to-list 'backup-directory-alist
   ;;              (cons tramp-file-name-regexp nil))
#+end_src

** Ag
#+begin_src emacs-lisp :tangle yes
    (when (executable-find "ag")
      (use-package ag :ensure t)
      (setq ag-highlight-search t)
      (use-package wgrep-ag) :ensure t)
(customize-set-variable 'ag-arguments
   (quote
    ("--smart-case" "--nogroup" "--column" "--ignore-dir" "node_modules" "--ignore-dir" "elpa")))
(customize-set-variable 'ag-highlight-search t)
#+end_src

** COMMENT Evil
   #+begin_src emacs-lisp
(use-package evil :ensure t)
(require 'evil)



#+end_src

** COMMENT Ido
#+begin_src emacs-lisp :tangle yes
  (ido-mode t)
  (ido-ubiquitous-mode t)
  (ido-vertical-mode t)
  (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
  (setq ido-auto-merge-work-directories-length -1)


  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-max-prospects 30)

  (setq ido-ignore-buffers
        '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"
          "^\*compilation" "^\*GTAGS" "^session\.*" "^\*Compile-Log\*"
          ;; "^\*"
          )
        )

  (require 'flx-ido)
  (ido-everywhere t)
  (flx-ido-mode 1)

  ;; (bind-key "M-x" 'smex)
  ;; (bind-key "M-X" 'smex-major-mode-commands)
  ;;  (bind-key "C-c M-x" 'smex-update)

#+end_src

** COMMENT Ace jump
#+begin_src emacs-lisp :tangle yes
  (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quick move minor mode"
    t)

  (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
  (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))

  (key-chord-define-global "jk" 'ace-jump-word-mode)
#+end_src

x** COMMENT Mu4e
#+begin_src emacs-lisp :tangle yes
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

    (require 'mu4e)

    ;; default
    (setq mu4e-maildir "~/.mail")

  (setq mu4e-headers-skip-duplicates t)
  (setq mu4e-headers-include-related t)
  (setq mu4e-use-fancy-chars nil)
  (setq mu4e-view-show-images t)
  (setq mu4e-attachment-dir "~/Downloads")

  (setq mu4e-view-prefer-html t)

    ;; (setq mu4e-drafts-folder "/[Gmail].Drafts")
    ;; (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
    ;; (setq mu4e-trash-folder  "/[Gmail].Trash")


    ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)

    ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
    ;; additional non-Gmail addresses and want assign them different
    ;; behavior.)

    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.

    ;; (setq mu4e-maildir-shortcuts
    ;;     '( ("/INBOX"               . ?i)
    ;;        ("/[Gmail].Sent Mail"   . ?s)
    ;;        ("/[Gmail].Trash"       . ?t)
    ;;        ("/[Gmail].All Mail"    . ?a)))

    ;; allow for updating mail using 'U' in the main view:
    (setq mu4e-get-mail-command "mbsync -a")

    ;; something about ourselves
    (setq
     user-mail-address "dromar566@gmail.com"
     user-full-name  "David Barrutia"
     mu4e-compose-signature
     (concat
      "David Barrutia"
      ""))

    ;; sending mail -- replace USERNAME with your gmail username
    ;; also, make sure the gnutls command line utils are installed
    ;; package 'gnutls-bin' in Debian/Ubuntu

    (require 'smtpmail)
    (setq message-send-mail-function 'smtpmail-send-it
       starttls-use-gnutls t
       smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
       smtpmail-auth-credentials
       '(("smtp.gmail.com" 587 "dromar56@gmail.com" nil))
       smtpmail-default-smtp-server "smtp.gmail.com"
       smtpmail-smtp-server "smtp.gmail.com"
       smtpmail-smtp-service 587)

    ;; alternatively, for emacs-24 you can use:
    ;;(setq message-send-mail-function 'smtpmail-send-it
    ;;     smtpmail-stream-type 'starttls
    ;;     smtpmail-default-smtp-server "smtp.gmail.com"
    ;;     smtpmail-smtp-server "smtp.gmail.com"
    ;;     smtpmail-smtp-service 587)

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

  (defun mu4e-open-mail-in-browser (args)
    (interactive "P")
    (let ((mail-content (buffer-string)))
        (save-excursion
          (with-temp-file "/tmp/mu4e-tmp-file.html"
            (progn
              (insert mail-content)
              (eww-open-file "/tmp/mu4e-tmp-file.html"))))))

  (bind-key "C-x m" 'mu4e)

#+end_src

** COMMENT Auto-complete
   #+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;
;; Auto-Complete Mode
;;;;;;;;;;;;;;;;;;;;;


(use-package ac-dabbrev :ensure t)
(use-package auto-complete :ensure t)

(require 'cl)
(require 'dabbrev)
(require 'auto-complete)

(require 'ac-dabbrev)


(after 'auto-complete
  (add-to-list 'ac-sources 'ac-source-dabbrev))
(after 'linum
  (ac-linum-workaround))

(defun ac-dabbrev-expand ()
  (interactive)
  (auto-complete '(ac-source-dabbrev)))

(bind-key "M-/" 'ac-dabbrev-expand)

(global-auto-complete-mode t)

(setq ac-auto-start nil)
(define-key ac-mode-map (kbd "<tab>") nil)
(define-key ac-mode-map (kbd "C-o") 'auto-complete)
(define-key ac-mode-map (kbd "M-?") 'auto-complete)
;; (define-key ac-mode-map (kbd "M-/") 'dabbrev-expand)
(define-key ac-complete-mode-map (kbd "C-g") 'ac-stop)
(define-key ac-complete-mode-map (kbd "<down>") 'ac-next)
(define-key ac-complete-mode-map (kbd "<up>") 'ac-previous)
(define-key ac-complete-mode-map (kbd "RET") 'ac-expand)

#+end_src

** COMMENT Window-number
   #+begin_src emacs-lisp :tangle yes
(require 'cl)
(use-package window-number :ensure t)
(require 'window-number)
(window-number-mode 1)
#+end_src

** COMMENT Discover
   #+begin_src emacs-lisp :tangle yes
     (use-package discover :ensure t)
     (use-package discover-my-major :ensure t)

     (require 'discover)
     (global-discover-mode 1)

     ;; (setq makey-key-mode-keymaps nil)
     ;; (discover-add-context-menu
     ;;  :context-menu '(misc-functions
     ;;                  (description "Misc functions")
     ;;                  (actions
     ;;                   ("Functions"
     ;;                    ("`" "Insert `" (lambda () (interactive) (insert "`")))
     ;;                    ("m" "Save macro" save-macro)
     ;;                    ("u" "Undo tree" undo-tree-visualize)
     ;;                    ("q" "helm-mini" helm-mini)
     ;;                    ("d" "dired-jump" dired-jump)
     ;;                    ("p" "switch projects" projectile-switch-project)
     ;;                    ("c" "toggle company" company-auto-completion-toggle)
     ;;                    ("y" "kill ring" helm-show-kill-ring)
     ;;                    ("f" "helm projectile" helm-projectile)
     ;;                    ("w" "helm projectile" helm-projectile)
     ;;                    ("1" "ace jump" ace-jump-mode)
     ;;                    ("r" "discover register" makey-key-mode-popup-register)
     ;;                    ("s" "Font Size" set-frame-font-size)
     ;;                    ("<tab>" "helm-mini" helm-mini)
     ;;                    ("v" "Revert buffer" revert-buffer)
     ;;                    )))

     ;;  :bind "`")

     ;; (global-unset-key (kbd "`"))

     ;; (discover-add-context-menu
     ;;  :context-menu '(js2-refactor
     ;;               (description "JS2 Refactor2")
     ;;               (actions
     ;;                ("Functions"
     ;;                 ("ef" "extract function" js2r-extract-function)
     ;;                 ("em" "extract method" js2r-extract-method)
     ;;                 ("ip" "introduce parameter" js2r-introduce-parameter)
     ;;                 ("lp" "localize parameter" js2r-localize-parameter)
     ;;                 ("ao" "Arguments to object" js2r-arguments-to-object))
     ;;                ("Variables"
     ;;                 ("ev" "Extract variable" js2r-extract-var)
     ;;                 ("iv" "Inline variable" js2r-inline-var)
     ;;                 ("rv" "Rename variable" (lambda () (interactive) (js2r-rename-var)))
     ;;                 ("vt" "var to this" js2r-var-to-this)
     ;;                 ("sv" "split var declaration" js2r-split-var-declaration))
     ;;                ("Contract/Expand"
     ;;                 ("cu" "contract function" js2r-contract-function)
     ;;                 ("eu" "expand function" js2r-expand-function)
     ;;                 ("ca" "contract array" js2r-contract-array)
     ;;                 ("ea" "expand array" js2r-expand-array)
     ;;                 ("co" "contract object" js2r-contract-object)
     ;;                 ("eo" "expand object" js2r-expand-object))
     ;;                ("Structure"
     ;;                 ("3i" "ternary to if" js2r-ternary-to-if)
     ;;                 ("uw" "unwrap" js2r-unwrap)
     ;;                 ("ig" "inject global in iife" js2r-inject-global-in-iife)
     ;;                 ("wi" "wrap buffer in iife" js2r-wrap-buffer-in-iife))
     ;;                ("Misc"
     ;;                 ("lt" "log this" js2r-log-this)
     ;;                 ("sl" "forward slurp" js2r-forward-slurp)
     ;;                 ("ba" "forward barf" js2r-forward-barf))))
     ;;  :mode 'js2-mode
     ;;  :mode-hook 'js2-mode-hook
     ;;  :bind "C-c C-m")

     ;; (discover-add-context-menu
     ;;  :context-menu '(register
     ;;                  (description "Register and rectangles")
     ;;                  (actions
     ;;                   ("Save to register"
     ;;                    ("w" "window configuration to register" window-configuration-to-register)
     ;;                    ("x" "copy to register" copy-to-register)
     ;;                    ("SPC" "point to register" point-to-register)
     ;;                    ("+" "increment register" increment-register)
     ;;                    ("f" "frame configuration to register" frame-configuration-to-register)
     ;;                    ;; this is technically not bound to a key but it's just too darn
     ;;                    ;; useful to leave unbound.
     ;;                    ("A" "append to register" append-to-register)
     ;;                    )

     ;;                   ("Load from register"
     ;;                    ("l" "list registers" helm-register)
     ;;                    ("i" "insert register" insert-register)
     ;;                    ("j" "jump to register" jump-to-register)
     ;;                    ("n" "number to register" number-to-register))

     ;;                   ("Rectangle"
     ;;                    ("M-w" "copy rectangle as kill" copy-rectangle-as-kill)
     ;;                    ("N" "rectangle number lines" rectangle-number-lines)
     ;;                    ("c" "clear rectangle" clear-rectangle)
     ;;                    ("d" "delete rectangle" delete-rectangle)
     ;;                    ("k" "kill rectangle" kill-rectangle)
     ;;                    ("o" "open rectangle" open-rectangle)
     ;;                    ("r" "copy rectangle to register" copy-rectangle-to-register)
     ;;                    ("t" "string rectangle" string-rectangle)
     ;;                    ("y" "yank rectangle" yank-rectangle))
     ;;                   ))

     ;;  :bind "C-x r")


     ;; (discover-add-context-menu
     ;;  :context-menu '(narrow
     ;;                  (description "Narrow")
     ;;                  (actions
     ;;                   ("Narrow"
     ;;                    ("n" "Narrow to region" narrow-to-region)
     ;;                    ("d" "Narrow to defun" narrow-to-defun)
     ;;                    ("p" "Narrow to page" narrow-to-page))
     ;;                   ("Org narrow"
     ;;                    ("b" "Org narrow to block" org-narrow-to-block)
     ;;                    ("e" "Org narrow to element" org-narrow-to-element)
     ;;                    ("s" "Org narrow to subtree" org-narrow-to-subtree))
     ;;                   ("Widen" ("w" "Widen" widen))))

     ;;  :bind "C-x n")


     (discover-add-context-menu
      :context-menu '(helpfunctions
                      (description "Help Functions")
                      (actions
                       ("Help functions"

                        ("C-a"       "about-emacs" about-emacs)
                        ("C-c"       "describe-copying" describe-copying)
                        ("C-d"       "view-emacs-debugging" view-emacs-debugging)
                        ("C-e"       "view-external-packages" view-external-packages)
                        ("C-f"       "view-emacs-FAQ" view-emacs-FAQ)
                        ("C-h"       "help-for-help" help-for-help)
                        ("RET"       "view-order-manuals" view-order-manuals)
                        ("C-n"       "view-emacs-news" view-emacs-news)
                        ("C-o"       "describe-distribution" describe-distribution)
                        ("C-p"       "view-emacs-problems" view-emacs-problems)
                        ("C-t"       "view-emacs-todo" view-emacs-todo)
                        ("C-w"       "describe-no-warranty" describe-no-warranty)
                        ("C-\\"      "describe-input-method" describe-input-method)
                        ("."         "display-local-help" display-local-help)
                        ("?"         "help-for-help" help-for-help)
                        ("C"         "describe-coding-system" describe-coding-system)
                        ("F"         "Info-goto-emacs-command-node" Info-goto-emacs-command-node)
                        ("I"         "describe-input-method" describe-input-method)
                        ("K"         "Info-goto-emacs-key-command-node" Info-goto-emacs-key-command-node)
                        ("L"         "describe-language-environment" describe-language-environment)
                        ("P"         "describe-package" describe-package)
                        ("S"         "info-lookup-symbol" info-lookup-symbol)
                        ("a"         "apropos-command" apropos-command)
                        ("b"         "describe-bindings" describe-bindings)
                        ("c"         "describe-key-briefly" describe-key-briefly)
                        ("d"         "apropos-documentation" apropos-documentation)
                        ("e"         "view-echo-area-messages" view-echo-area-messages)
                        ("f"         "describe-function" describe-function)
                        ("g"         "describe-gnu-project" describe-gnu-project)
                        ("h"         "view-hello-file" view-hello-file)
                        ("i"         "info" info)
                        ("k"         "describe-key" describe-key)
                        ("l"         "view-lossage" view-lossage)
                        ("m"         "describe-mode" describe-mode)
                        ("n"         "view-emacs-news" view-emacs-news)
                        ("p"         "finder-by-keyword" finder-by-keyword)
                        ("q"         "help-quit" help-quit)
                        ("r"         "info-emacs-manual" info-emacs-manual)
                        ("s"         "describe-syntax" describe-syntax)
                        ("t"         "help-with-tutorial" help-with-tutorial)
                        ("v"         "describe-variable" describe-variable)
                        ("w"         "where-is" where-is)
                        ("<f1>"      "help-for-help" help-for-help)
                        ("<help>"    "help-for-help" help-for-help)


                        )
                       ))

      :bind "C-h h")

#+end_src

** COMMENT Workspace
   #+begin_src emacs-lisp
(use-package workgroups2 :ensure t)
(require 'workgroups2)

;; if you start Emacs as "emacs --daemon" - turn off autoloading of workgroups:
;; (setq wg-use-default-session-file nil)


;; Change workgroups session file
(setq wg-default-session-file "~/.emacs.d/.emacs_workgroups")

;; winner-mode to undo/redo windows changes
(when (fboundp 'winner-mode)
  (winner-mode 1))

;;Winner-mode per workgroup hack
(defvar wg-winner-vars nil)
(defvar wg-winner-hash nil)

(setq wg-winner-vars '(winner-ring-alist
               winner-currents
               winner-point-alist
               winner-undone-data
               winner-undo-counter
               winner-pending-undo-ring))

(setq wg-winner-hash (make-hash-table :test 'equal))

(defun wg-winner-put (winner-name)
  (let ((wg (ignore-errors (wg-workgroup-name (wg-current-workgroup)))))
    (if wg
    (puthash (list wg winner-name) (eval winner-name) wg-winner-hash))))

(defun wg-winner-get (winner-name)
  (let ((wg (ignore-errors (wg-workgroup-name (wg-current-workgroup)))))
    (if wg
    (eval `(setq ,winner-name (gethash '(,wg ,winner-name) wg-winner-hash))))))

(defun wg-winner-save ()
  (if winner-mode
      (progn
    (winner-mode -1)
    (defun wg-winner-mode-restore ()
      (winner-mode 1)))
    (defun wg-winner-mode-restore ()))
  (mapcar 'wg-winner-put wg-winner-vars))

(defun wg-winner-load ()
  (mapcar 'wg-winner-get wg-winner-vars)
  (wg-winner-mode-restore))

(defadvice wg-switch-to-workgroup (before wg-winner-before activate)
  (wg-winner-save))

(defadvice wg-switch-to-workgroup (after wg-winner-after activate)
  (wg-winner-load))


;     (discover-add-context-menu
;      :context-menu '(workgroups2
;                      (description "workgroups2")
;                      (actions
;                       ("Windows configuration"
;                        ("w" "Save window configuration" wg-save-wconfig)
;                        ("j" "Jump to window configuration" wg-restore-saved-wconfig)
;                        ("k" "Kill window configuration" wg-kill-saved-wconfig)
;                        ("]" "Redo wconfig change" wg-redo-wconfig-change)
;                        ("[" "Undo wconfig change" wg-undo-wconfig-change)
;                        )
;                       ("Workgroups"
;                        ("M-e" "Switch to workgroup" wg-switch-to-workgroup)
;                        ("e" "Switch to workgroup" wg-switch-to-workgroup)
;                        ("/" "Switch to last workgroup" wg-switch-to-previous-workgroup)
;                        ("r" "Rename" wg-rename-workgroup)
;                        ("c" "Create" wg-create-workgroup)
;                        ("C" "Clone" wg-clone-workgroup)
;                        ("C-k" "Kill Workgroup" wg-kill-workgroup)
;                        ("s" "Save session" wg-save-session)
;                        ("C-l" "Load session" wg-reload-session)
;                        )
;                       ))
;      :bind "<f1>")

; (workgroups-mode 1)   ; put this one at the bottom of .emacs

#+end_src

** COMMENT Guru-mode
   #+begin_src emacs-lisp :tangle yes
;; (use-package guru-mode :ensure t)
;; (require 'guru-mode)
;; (guru-global-mode 1)
#+end_src

** COMMENT God-mode
   #+begin_src emacs-lisp :tangle yes
(defun my-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'bar
                      'box)))

(add-hook 'god-mode-enabled-hook 'my-update-cursor)
(add-hook 'god-mode-disabled-hook 'my-update-cursor)

(bind-key "<escape>" 'god-mode-all)
(after 'god-mode
  (define-key god-local-mode-map (kbd "i") 'god-mode)
  (define-key god-local-mode-map (kbd "<right>")	'windmove-right)
  (define-key god-local-mode-map (kbd "<left>")	'windmove-left)
  (define-key god-local-mode-map (kbd "<down>")	'windmove-down)
  (define-key god-local-mode-map (kbd "<up>")	'windmove-up))

#+end_src

** COMMENT Elscreen
   #+begin_src emacs-lisp :tangle yes
(elscreen-start)

;; Elscreen
(elscreen-set-prefix-key "\M-e")  ;; kbd
  (define-key elscreen-map (kbd  "t"             )  'elscreen-toggle-display-tab)
  (define-key elscreen-map (kbd  "<right>"       )  'elscreen-next)
  (define-key elscreen-map (kbd  "<left>"                )  'elscreen-previous)
  (define-key elscreen-map (kbd  "C-<right>"     )  'elscreen-next)
  (define-key elscreen-map (kbd  "C-<left>"      )  'elscreen-previous)
  (define-key elscreen-map (kbd  "r"             )  'elscreen-screen-nickname)
  (define-key elscreen-map (kbd  "c"             )  'elscreen-create)
  (define-key elscreen-map (kbd  "k"             )  'elscreen-kill)
  (define-key elscreen-map (kbd  "s"             )  'elscreen-swap)
  (define-key elscreen-map (kbd  "t"             )  'elscreen-toggle-display-tab)
  (define-key elscreen-map (kbd  "<right>"       )  'elscreen-next)
  (define-key elscreen-map (kbd  "<left>"                )  'elscreen-previous)
  (define-key elscreen-map (kbd  "C-<right>"     )  'elscreen-next)
  (define-key elscreen-map (kbd  "C-<left>"      )  'elscreen-previous)

#+end_src

** COMMENT Git Gutter
#+begin_src emacs-lisp :tangle yes
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode t))
#+end_src
* Elisp functions
#+begin_src emacs-lisp :tangle yes

     (defun narrow-or-widen-dwim (p)
       "If the buffer is narrowed, it widens. Otherwise, it narrows
     intelligently.  Intelligently means: region, org-src-block,
     org-subtree, or defun, whichever applies first.  Narrowing to
     org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer is already
     narrowed."
       (interactive "P")
       (declare (interactive-only))
       (cond ((and (buffer-narrowed-p) (not p)) (widen))
             ((and (boundp 'org-src-mode) org-src-mode (not p))
              (org-edit-src-exit))
             ((region-active-p)
              (narrow-to-region (region-beginning) (region-end)))
             ((derived-mode-p 'org-mode)
              (cond ((ignore-errors (org-edit-src-code))
                     (delete-other-windows))
                    ((org-at-block-p)
                     (org-narrow-to-block))
                    (t (org-narrow-to-subtree))))
             ((derived-mode-p 'prog-mode) (narrow-to-defun))
             (t (error "Please select a region to narrow to"))))

  (defun db4go-toggle-productivity ()
    (interactive)
    (with-current-buffer (find-file-noselect "/sudo:root@localhost:/etc/hosts")
      (let (beg)
        (goto-char (point-min))
        (search-forward-regexp "^#PRODUCTIVITY")
        (setq beg (point))
        (search-forward-regexp "^#END_PRODUCTIVITY")
        (beginning-of-line)
        (comment-or-uncomment-region beg (point)))
      (save-buffer))
    (message "Productivity toggled"))

  (defun db-read-with-eww ()
    (interactive)
    (let ((temp-file (make-temp-file "epub-to-eww" nil ".html")))
      (write-region nil nil temp-file)
      (eww-open-file temp-file)))

#+end_src
* Languages modes
** scala
#+begin_src emacs-lisp :tangle yes
  (use-package scala-mode2
    :ensure t)

  (use-package ensime
    :ensure t)

#+end_src
** c
   #+begin_src emacs-lisp
     (defun count-lines-function ()
       "count number of lines and characters beetwen matched parenthesis"
       (interactive)
       (forward-char 1)
       (save-excursion
         (set-mark-command nil)
         (let
             ((start (progn (c-beginning-of-defun) (point)))
              (end (progn (c-end-of-defun) (previous-line 3)
                          (forward-char 1) (forward-char -1)
                          (point))))
           (count-lines-region start end)))
       (forward-char -1))
     ;;  Ligne ubercool
     (save-excursion (let ((start (point)) (end (progn (forward-list) (point)))) (count-lines-region start end)))

     ;; Add count-lines-function to c-mode
     (defun my-c-mode-hook ()
       (local-set-key (kbd "C-c C-w") 'count-lines-function)
       )
     (add-hook 'c-mode-hook 'my-c-mode-hook)

   #+end_src
   
** coffeescript
   #+begin_src emacs-lisp
     (eval-after-load "coffee-mode"
       '(progn
          (define-key coffee-mode-map [(meta r)] 'coffee-compile-buffer)
          (define-key coffee-mode-map (kbd "C-j") 'coffee-newline-and-indent
            (setq coffee-args-compile (quote ("-c" "--bare"))))
          (setq coffee-tab-width 4)))
   #+end_src

** jade
   #+begin_src emacs-lisp
     (require 'sws-mode)
     (add-to-list 'auto-mode-alist '("\\.styl$" . sws-mode))

     (require 'jade-mode)
     (add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))


     (add-hook 'jade-mode-hook 'enable-indent-guide)
     (defun enable-indent-guide ()
       "Enable indent guide mode"
       (indent-guide-mode t))


     (add-hook 'jade-mode-hook '(lambda () (interactive) (yas-minor-mode -1)))
     (add-hook 'jade-mode-hook '(lambda () (interactive) (smartparens-strict-mode -1)))


     ;; First create new face which is a copy of hl-line-face
     (copy-face 'font-lock-type-face 'font-lock-type-face-jade-mode)

     ;; Change what you want in this new face
     (set-face-attribute 'font-lock-type-face-jade-mode
                         '(:foreground "blue" :weight normal))

     ;; The function to use the new face
     (defun my-jade-type-face ()
       (set (make-local-variable 'font-lock-type-face) ; This is how to make it local
            'font-lock-type-face-jade-mode))

     ;; Finally, the hook
     (add-hook 'jade-mode-hook 'my-jade-type-face)
#+end_src

** Org
*** Setup
    #+begin_src emacs-lisp

      (use-package org
        :config
        (bind-key "<f2>" 'org-edit-special org-mode-map)
        (bind-key "<f2>" 'org-edit-src-exit org-src-mode-map)
        (bind-key "\C-cl" 'org-store-link)
        (bind-key "\C-ca" 'org-agenda))

      (setq org-log-done t)

      (setq org-tag-alist nil)

      ;; (bind-key "<C-S-right>" 'helm-occur)

      (eval-after-load "org"
        '(progn
           (define-key org-mode-map (kbd "<C-S-up>") 'outline-up-heading)
           (define-key org-mode-map (kbd "<C-S-up>") 'outline-up-heading)
           ;; (define-key org-mode-map (kbd "<C-S-right>") 'nil)
           ;; (define-key org-mode-map (kbd "<C-left>") nil)
           ;; (define-key org-mode-map (kbd "<C-right>") nil)
           (define-key org-mode-map (kbd "M-<down>") 'nil)
           (define-key org-mode-map (kbd "M-<up>") 'nil)))

      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)

      (customize-set-variable 'org-export-backends (quote (ascii html icalendar latex md)))

      (setq org-main-file "~/org/notes.org")
      (setq org-directory "~/org")

      (defun org-insert-elisp-block (name beg end)
        (interactive "sName:\nr")
        (org-insert-heading-after-current)
        (save-excursion
          (insert name "\n")
          (insert "#+begin_src emacs-lisp :tangle yes" "\n")
          (if (region-active-p)
              (progn
                (kill-region beg end)
                (yank)))
          (insert "#+end_src")))

      (define-key org-mode-map (kbd "M-<return>") 'org-insert-elisp-block)


    #+end_src

*** Org agenda
    Main org file which will be added to the agenda and where notes will be captured (using C-c c).
    #+begin_src emacs-lisp :tangle yes
      (setq org-agenda-files '("~/org"))
(load-library "find-lisp")
(setq org-agenda-files (find-lisp-find-files org-directory "\.org$"))

      ;; (setq org-agenda-files (list org-main-file))
#+end_src

*** Org capture
    #+begin_src emacs-lisp :tangle yes
      (setq org-default-notes-file org-main-file)
      (define-key global-map (kbd "C-c c") 'org-capture)
      (define-key global-map (kbd "s-t") 'org-capture)
      ;;(define-key global-map (kbd "<f1>") 'org-capture)
      (define-key global-map (kbd "<S-f1>") (lambda () (interactive)
                                              (let ((current-prefix-arg '(4)))
                                                (call-interactively 'org-capture))))

      (defun llc-get-project-org-name ()
        "Return the name of the projectile project"
        (replace-regexp-in-string "[^[:alnum:]]" "-"
                                  (car (last (split-string (projectile-project-root) "/" t)))))

      (defun llc-get-project-org-file ()
        "Return the path to the project org file"
        (concat org-directory "/projects/"
                (llc-get-project-org-name)
                ".org"))

      (defun llc-find-project-org-file-task ()
        "Find the org file associated with the current projectile project, creating it if needed, and place the point at the end of 'Tasks' subtree."
        (let ((project-file (llc-get-project-org-file))
              (project-headline-regexp "^\\* Tasks")
              (project-name (llc-get-project-org-name)))
          (set-buffer (find-file-noselect project-file))
          (goto-char (point-min))
          (if (not (re-search-forward project-headline-regexp nil t))
              (progn
                (goto-char (point-max))
                (if (not (eq (buffer-size) 0))
                    (newline 2))
                (insert (concat "* Tasks :project:" project-name ":"))))
          (goto-char (point-min))
          (re-search-forward project-headline-regexp)
          (end-of-line)))

      ;; (setq org-capture-templates
      ;;       '(("p" "Project" entry (function llc-find-project-org-file-task)
      ;;          "* TODO %?\n  %a\n  %i")
      ;;         ("t" "Todo" entry (file+headline "~/org/notes.org" "Todo")
      ;;          "* TODO %?\n  %a\n  %i")
      ;;         ("n" "Note" entry (file+headline "~/org/notes.org" "Notes")
      ;;          "* %?\n  %a\n  %i")
      ;;         ("j" "Journal" entry (file+datetree "~/org/journal.org")
      ;;          "* %?\nEntered on %U\n  %a\n  %i")
      ;;         ("J" "Journal - more options")
      ;;         ("Jc" "Journal Clipboard" entry (file+datetree "~/org/journal.org")
      ;;          "* %?\nEntered on %U\n  %x\n  %a")))


      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline "~/org/todo.org" "Todo")
               "* TODO %?\n  %a\n  %i")
              ("w" "Todo - Work" entry (file+headline "~/org/todo.org" "Work")
               "* TODO %?\n  %a\n  %i")
              ("c" "Todo - Clipboard" entry (file+headline "~/org/todo.org" "Todo")
               "* TODO %?\n  %c\n  %i")
              ("j" "Journal" entry (file+datetree "~/org/journal.org")
               "* %?\nEntered on %U\n  %a\n  %i")
              ("J" "Journal - more options")
              ("Jc" "Journal Clipboard" entry (file+datetree "~/org/journal.org")
               "* %?\nEntered on %U\n  %x\n  %a")))

      (setq org-capture-templates-contexts
            '(("p" ((lambda () "DOCSTRING" (interactive) (projectile-project-root))))))

      ;; Close frame after org-capture only if a certain frame-parameter is set
      (defun llc-close-frame-after-org-capture ()
        (if (frame-parameter nil 'llc-close-frame-after-org-capture)
            (delete-frame)))
      (add-hook 'org-capture-after-finalize-hook 'llc-close-frame-after-org-capture)

    #+end_src

*** COMMENT org-bullets
    #+begin_src emacs-lisp :tangle yes
(use-package org-bullets :ensure t)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** javascript
   #+begin_src emacs-lisp
     (use-package js2-mode
       :mode "\\.js\\'"
       :config 
       (customize-set-variable 'js2-bounce-indent-p nil)
       (customize-set-variable 'js2-global-externs [global require])
       (customize-set-variable 'js2-include-node-externs t)
       (customize-set-variable 'js2-basic-offset 2)
       (customize-set-variable 'js2-mode-show-parse-errors nil)
       (customize-set-variable 'js2-mode-show-strict-warnings nil)

       (add-hook 'js2-mode-hook (lambda () (setq indent-tabs-mode 'nil)))

       (use-package js2-refactor
         :config
         ;; eg. extract function with `C-c C-m ef`.
         (js2r-add-keybindings-with-prefix "C-c C-m")
         (add-hook 'js2-mode-hook #'js2-refactor-mode))

       (use-package tern
         :ensure t
         :if (executable-find "tern")
         :config 
         (add-hook 'js2-mode-hook 'tern-mode)
         (use-package company-tern :ensure t))

     )

     ;; SLIME - SWANK-JS
     ;; (require 'slime)
     ;; (autoload 'slime "slime" "Slime" t)

     ;; (ignore-errors
     ;;   (slime-setup '(slime-js2 slime-repl))
     ;;   (add-hook 'js2-mode-hook
     ;;             (lambda ()
     ;;               (slime-js-minor-mode 1)))
     ;;   (add-hook 'css-mode-hook
     ;;             (lambda ()
     ;;               (define-key css-mode-map "\M-\C-x" 'slime-js-refresh-css)
     ;;               (define-key css-mode-map "\C-c\C-r" 'slime-js-embed-css))))


     ;;SWANK-JS MODE IS FUCKING AWESOME
     ;; (bind-key [f5] 'slime-js-reload)

     ;; ;; SKEWER
     ;; (add-hook 'js2-mode-hook 'skewer-mode)
     ;; (add-hook 'css-mode-hook 'skewer-css-mode)
     ;; (add-hook 'html-mode-hook 'skewer-html-mode)

     ;; TERN
     ;; (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     ;; (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     ;; (eval-after-load 'tern
     ;;   '(progn
     ;;      (require 'tern-auto-complete)
     ;;      ;; (tern-ac-setup)
     ;;      (define-key tern-mode-keymap (kbd "C-o") 'tern-ac-complete)
     ;;      ))


   #+end_src
   
** livescript
   #+begin_src emacs-lisp
(load "~/.emacs.d/vendor/livescript-mode.el")

;; Javascript improved mode js2-mode
(add-to-list 'auto-mode-alist '("\\.ls\\'" . livescript-mode))

(defun livescript-eval ()
  (local-set-key (kbd "C-x C-e") 'livescript-compile-region))
(add-hook 'livescript-mode-hook 'livescript-eval)




#+end_src

** lua
   #+begin_src emacs-lisp

(setq auto-mode-alist (cons '("\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)



#+end_src

** php
   #+begin_src emacs-lisp

     (autoload 'php-mode "php-mode.el" "Php mode." t)
     (setq auto-mode-alist (append '(("/*.\.php[345]?$" . php-mode)) auto-mode-alist))

   #+end_src

** python
   #+begin_src emacs-lisp
     ;; (require 'elpy nil t)

     (elpy-enable)
     (elpy-use-ipython "ipython3")
     ;; (elpy-clean-modeline)

     (defun elpy-use-python3 (args)
       (elpy-use-ipython "ipython3")
       (interactive "P")
       )

     (setq elpy-rpc-backend "jedi")

     ;; (add-hook 'python-mode-hook 'jedi:setup)
     ;; (setq jedi:complete-on-dot t)                ; optional

     ;; Ignoring electric indentation
     (defun electric-indent-ignore-python (char)
       "Ignore electric indentation for python-mode"
       (if (equal major-mode 'python-mode)
           `no-indent'
         nil))
     (add-hook 'electric-indent-functions 'electric-indent-ignore-python)

     (define-key elpy-mode-map (kbd "<C-down>") 'nil)
     (define-key elpy-mode-map (kbd "<C-up>") 'nil)
     (define-key elpy-mode-map (kbd "<M-up>") 'nil)
     (define-key elpy-mode-map (kbd "<M-down>") 'nil)

     ;; Fix yasnippet indentation in python-mode
     (add-hook 'python-mode-hook
        '(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)
           (company-mode -1)))
   #+end_src

** web
   #+begin_src emacs-lisp
     (require 'web-mode)
     (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.dust?\\'" . web-mode))

     (defun my-web-mode-hook ()
       "Hooks for Web mode."
       (setq web-mode-markup-indent-offset 4)
       )
     (add-hook 'web-mode-hook  'my-web-mode-hook)
   #+end_src

* Core
** Misc
#+begin_src emacs-lisp
  (customize-set-variable 'winner-dont-bind-my-keys t)
  (winner-mode 1)

                                          ; (setq mac-command-modifier 'meta)
                                          ; (setq mac-option-modifier 'super)

  (setq mac-command-modifier 'super)
  (setq mac-option-modifier 'meta)

                                          ; Show full path in title
  (setq-default frame-title-format "%f")
  (setq ring-bell-function 'ignore)

  (setq indent-tabs-mode 'nil)

  (setq save-interprogram-paste-before-kill t)

  (setq bookmark-saved-flag 1)

  (setq suggest-key-binding 5)

  (window-numbering-mode t)

  (setq help-window-select t)

  (customize-set-variable 'scroll-bar-mode (quote right))
  (customize-set-variable 'scroll-conservatively 100000)
  (customize-set-variable 'scroll-preserve-screen-position 1)

  (customize-set-variable 'show-paren-delay 0)
  (customize-set-variable 'show-paren-mode t)
  (customize-set-variable 'smex-history-length 1000)
  (customize-set-variable 'recentf-auto-cleanup (quote never))
  (customize-set-variable 'recentf-max-saved-items 200000)



  (setq inhibit-startup-screen t)

  (setq reb-re-syntax 'string) ;; fix backslash madness
  (add-hook 'reb-mode-hook (lambda () (smartparens-strict-mode -1)))

  (global-auto-revert-mode 1)
  (electric-indent-mode -1)
  (transient-mark-mode 1)
  (delete-selection-mode -1)

  ;; Enable access to the clipboard
  (setq x-select-enable-clipboard t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Try to fix the shell unicode problem
  (defadvice ansi-term (after advise-ansi-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (ad-activate 'ansi-term)

  (put 'narrow-to-region 'disabled nil)

  (require 'recentf)
  ;; (recentf-mode 1)
  (setq recentf-max-menu-items 10)
  ;; (bind-key "\C-x\ \C-r" 'recentf-open-files)

  (require 'uniquify)
  (customize-set-variable 'uniquify-buffer-name-style 'post-forward-angle-brackets)
  (customize-set-variable 'uniquify-strip-common-suffix t)

  ;; (setq uniquify-buffer-name-style 'reverse)

  ;;todo

  (defun my-find-file-check-make-large-file-read-only-hook ()
    "If a file is over a given size, make the buffer read only."
    (when (> (buffer-size) (* 1024 1024))
      (setq buffer-read-only t)
      (buffer-disable-undo)
      (fundamental-mode)))
  (add-hook 'find-file-hooks 'my-find-file-check-make-large-file-read-only-hook)

                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Add prefix to Dired buffers
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (add-hook 'dired-mode-hook 'ensure-buffer-name-ends-in-slash)
  (defun ensure-buffer-name-ends-in-slash ()
    "change buffer name to end with slash"
    (let ((name (buffer-name)))
      (if (not (string-match "^Dir/" name))
          (rename-buffer (concat "Dir/" name) t))))

                                        ;;;;;;;;;;;;;;;;;;;
  ;; Eval and replace
                                        ;;;;;;;;;;;;;;;;;;;

  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))

                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Emacs Backfup Files settings (those damn annoying ~ files !)
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  (setq auto-save-file-name-transforms
        `((".*" ,"~/.saves/" t)))

  ;; remove those pesky lock files
  (setq create-lockfiles nil)

                                        ;;;;;;;;;;;;;;;;;;;;;;
  ;; Mouse/Wheel options
                                        ;;;;;;;;;;;;;;;;;;;;;;

  (defun up-and-locate()
    (interactive)
    (scroll-down 8)
    )

  (defun down-and-locate()
    (interactive)
    (scroll-down -8)
    )

  (defun mouse-up-and-locate()
    (interactive)
    (scroll-down 3)
    )

  (defun mouse-down-and-locate()
    (interactive)
    (scroll-down -3)
    )


                                        ;;;;;;;;;;;;;;;;;;;;;;
  ;; Indent Whole Buffer
                                        ;;;;;;;;;;;;;;;;;;;;;;

  (defun indent-whole-buffer ()
    "indent whole buffer and untabify it"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil))

  ;;todo
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; FIX FOR TERMINAL SHIFT+UP
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (if (equal "xterm" (tty-type))
      (define-key input-decode-map "\e[1;2A" [S-up]))

  (defadvice terminal-init-xterm (after select-shift-up activate)
    (define-key input-decode-map "\e[1;2A" [S-up]))

                                        ;;;;;;;;;;;;;;;;;;;;;
  ;; Locked buffer mode
                                        ;;;;;;;;;;;;;;;;;;;;;

  (define-minor-mode locked-buffer-mode
    "Make the current window always display this buffer."
    nil " locked" nil
    (set-window-dedicated-p (selected-window) locked-buffer-mode))


                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Save undo history when revert-buffer
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; emacs doesn't actually save undo history with revert-buffer
  ;; see http://lists.gnu.org/archive/html/bug-gnu-emacs/2011-04/msg00151.html
  ;; fix that.
  (defun revert-buffer-keep-history (&optional IGNORE-AUTO NOCONFIRM PRESERVE-MODES)
    (interactive)

    ;; tell Emacs the modtime is fine, so we can edit the buffer
    (clear-visited-file-modtime)

    ;; insert the current contents of the file on disk
    (widen)
    (delete-region (point-min) (point-max))
    (insert-file-contents (buffer-file-name))

    ;; mark the buffer as not modified
    (not-modified)
    (set-visited-file-modtime))

  (setq revert-buffer-function 'revert-buffer-keep-history)
  (add-hook 'after-revert-hook  (lambda ()   (font-lock-fontify-buffer)))


                                        ;;;;;;;;;;;;;;;;;
  ;; Search engines
                                        ;;;;;;;;;;;;;;;;;

  (defun prelude-search (query-url prompt)
    "Open the search url constructed with the QUERY-URL.
                                        PROMPT sets the `read-string prompt."
    (browse-url
     (concat query-url
             (url-hexify-string
              (if mark-active
                  (buffer-substring (region-beginning) (region-end))
                (read-string prompt))))))

  (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
    "Given some information regarding a search engine, install the interactive command to search through them"
    `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
       ,(format "Search %s with a query or region if any." search-engine-name)
       (interactive)
       (prelude-search ,search-engine-url ,search-engine-prompt)))

  (prelude-install-search-engine "google"     "http://www.google.com/search?q="              "Google: ")
  (prelude-install-search-engine "youtube"    "http://www.youtube.com/results?search_query=" "Search YouTube: ")
  (prelude-install-search-engine "github"     "https://github.com/search?q="                 "Search GitHub: ")
  (prelude-install-search-engine "duckduckgo" "https://duckduckgo.com/?t=lm&q="              "Search DuckDuckGo: ")
  (prelude-install-search-engine "angular"     "https://www.google.com/search?as_sitesearch=angularjs.org&as_q=" "AngularJS: ")

#+end_src
   
** Don't switch frames when switching buffers
#+begin_src emacs-lisp :tangle yes
(setq ido-default-buffer-method 'selected-window)
#+end_src

** Shell
#+begin_src emacs-lisp :tangle yes
      ;; eshell prompt color
      (setq eshell-prompt-function (lambda nil
                                     (concat
                                      (propertize (eshell/pwd) 'face `(:foreground "cyan"))
                                      (propertize " $" 'face `(:foreground "cyan"))
                                      (propertize " " 'face `(:foreground "white"))
                                      )))
      (setq eshell-highlight-prompt nil)

      ;; Create a new eshell with prompt
      (defun db-create-eshell ()
        "creates a shell with a given name"
        (interactive);; "Prompt\n eshell name:")
        (let ((eshell-name (read-string "eshell name: " nil)))
          (eshell (concat "Eshell/" eshell-name ))))

      (defun db-create-shell ()
        "creates a shell with a given name"
        (interactive);; "Prompt\n shell name:")
        (let ((shell-name (read-string "shell name: " nil)))
          (shell (concat "Shell/" shell-name))))

  (defun db-execute-last-eshell-command ()
    (interactive)
    (let ((eshell-buffer "*eshell*"))
      (if (get-buffer eshell-buffer)
          (with-current-buffer eshell-buffer
            (eshell-previous-input 1)
            (eshell-send-input))
        (message (concat "Eshell buffer " eshell-buffer " not found")))))
  (bind-key "C-c e" 'db-execute-last-eshell-command)

#+end_src

** General Bindings
  #+begin_src emacs-lisp

    (bind-key "C-h a" 'apropos)

    (bind-key "M-n"     'forward-paragraph)
    (bind-key "M-p"     'backward-paragraph)

    (bind-key "C-c n"   'winner-redo)4
    (bind-key "C-c p"   'winner-undo)

    (bind-key "C-x C-1" 'delete-other-windows)
    (bind-key "C-x C-2" 'split-window-below)
    (bind-key "C-x C-3" 'split-window-right)
    (bind-key "C-x C-0" 'delete-window)

    (bind-key "C-;" 'repeat)

    (bind-key "s-n" 'narrow-or-widen-dwim)

    ;; Anzu
    (bind-key "M-%" 'anzu-query-replace)
    (bind-key "C-M-%" 'anzu-query-replace-regexp)

    ;; Font size
    (bind-key "C-0" '(lambda ()  (interactive) (text-scale-set 0)))
    (bind-key "C-+" 'text-scale-increase)
    (bind-key "C-=" 'text-scale-increase)
    (bind-key "C--" 'text-scale-decrease)
    (bind-key "C-<kb-0>" '(lambda ()  (interactive) (text-scale-set 0)))
    (bind-key "C-<kp-add>" 'text-scale-increase)
    (bind-key "C-<kp-subtract>" 'text-scale-decrease)

    ;; A la carte Menu
    (bind-key "C-x c" 'lacarte-execute-menu-command)

    ;; helm-imenuu
    ;; (bind-key "C-t" 'transpose-chars)
    ;; (bind-key "M-t" 'transpose-words)
    ;; (bind-key "C-t" 'idomenu)
    ;; (bind-key "M-t" 'imenu-anywhere)

    ;; Locked mode
    (bind-key "C-c C-l" 'locked-buffer-mode)

    ;; Windows manipulation
    (bind-key "C-x |"           'split-window-right)
    (bind-key "C-x -"           'split-window-below)
    (bind-key "C-x C-<right>"   'windmove-right)
    (bind-key "C-x C-<left>"    'windmove-left)
    (bind-key "C-x C-<down>"    'windmove-down)
    (bind-key "C-x C-<up>"      'windmove-up)

    ; (bind-key "C-x C-l"   'windmove-right)
    ; (bind-key "C-x C-j"    'windmove-left)
    ; (bind-key "C-x C-<down>"    'windmove-down)
    ; (bind-key "C-x C-<up>"      'windmove-up)

    (bind-key "C-x <left>"      'shrink-window-horizontally)
    (bind-key "C-x <right>"     'enlarge-window-horizontally)
    (bind-key "C-x <up>"        'enlarge-window)
    (bind-key "C-x <down>"      'shrink-window)

    ;; (bind-key "M-<right>" 'other-window)
    ;; (bind-key "M-<left>" '(lambda (&optional n)
    ;;                                           (interactive "P") (other-window -1)))

    (bind-key "C-<prior>" 'beginning-of-buffer)
    (bind-key "C-<next>" 'end-of-buffer)
    (bind-key "<prior>" 'scroll-down-command)
    (bind-key "<next>" 'scroll-up-command)
    (bind-key "M-<down>" (lambda () (interactive) (scroll-down -4)))
    (bind-key "M-<up>" (lambda () (interactive) (scroll-down 4)))


    ;; Undo Tree mode
    ;; (bind-key "C-+" 'undo-tree-redo)

    ;; iy-go-to-char
    (bind-key* "C-M-<right>" 'iy-go-to-char)
    (bind-key* "C-M-<left>" 'iy-go-to-char-backward)

    ;; multiple-cursors bindings
    (bind-key "s-M" 'mc/edit-lines)
    (bind-key "s-." 'mc/mark-next-like-this)
    (bind-key "s-," 'mc/mark-previous-like-this)
    (bind-key "s->" 'mc/unmark-next-like-this)
    (bind-key "s-<" 'mc/unmark-previous-like-this)
    (bind-key "s-m" 'mc/mark-all-like-this)

    (bind-key "<C-down-mouse-1>" 'mc/add-cursor-on-click)


    ;; Expand region by semantics units
    (bind-key "s-\/" 'er/expand-region)
    (bind-key "s-?" 'er/contract-region)

    ;; Register Windows
    (bind-key "<f9>" '(lambda () (interactive) (jump-to-register 9)
                                    (message "Windows disposition loaded")))
    (bind-key "<f10>" '(lambda () (interactive) (window-configuration-to-register 9)
                                     (message "Windows disposition saved")))

    ;; Projectile
    (bind-key "C-M-d" 'projectile-find-dir)
    (bind-key "s-p" 'helm-projectile-switch-project)

    ;; Resize Windows
    (bind-key "C-M-<left>" 'shrink-window-horizontally)
    (bind-key "C-M-<right>" 'enlarge-window-horizontally)
    (bind-key "C-M-<down>" 'shrink-window)
    (bind-key "C-M-<up>" 'enlarge-window)

    (bind-key "<f11>" 'menu-bar-mode)
    (bind-key "<f12>" 'indent-whole-buffer)


    ;; Ace Jump Mode
    (define-key global-map (kbd "M-SPC") 'ace-jump-mode)
    (define-key global-map (kbd "C-/") 'ace-jump-mode)

    (define-key global-map (kbd "C-,") 'undo-tree-undo)


    ;;Project Explorer
    ;; (bind-key "<f1>" 'project-explorer-open)


    ;;Query Replace Regex
    (bind-key "C-x C-r" 'query-replace-regexp)
    (bind-key "s-O" 'my-projectile-multi-occur)

    ;; Macro bindings
    ;; (bind-key "<f2>" 'apply-macro-to-region-lines)

    ;; Goto
    (bind-key [(meta g)] 'goto-line)

    (bind-key "C-x C-b" 'projectile-switch-to-buffer)

    ;; (bind-key "C-x b" 'ibuffer)
    ;; (bind-key "<M-up>" 'up-and-locate)
    ;; (bind-key "<M-down>" 'down-and-locate)
    (bind-key [mouse-5] 'mouse-down-and-locate)
    (bind-key [mouse-4] 'mouse-up-and-locate)




#+end_src
** COMMENT Disable mouse
#+begin_src emacs-lisp :tangle yes
  (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1]
               [mouse-2] [down-mouse-2] [drag-mouse-2] [double-mouse-2] [triple-mouse-2]
               [mouse-3] [down-mouse-3] [drag-mouse-3] [double-mouse-3] [triple-mouse-3]
               [mouse-4] [down-mouse-4] [drag-mouse-4] [double-mouse-4] [triple-mouse-4]
               [mouse-5] [down-mouse-5] [drag-mouse-5] [double-mouse-5] [triple-mouse-5]
               [M-mouse-2]))
   (global-unset-key k))
#+end_src

* Appearance
** Misc
  #+begin_src emacs-lisp
    (defun set-frame-font-size (size)
      (interactive "nSize:")
      (set-face-attribute 'default (selected-frame) :height size)
      )

    ;; Show indentation
    ;; Nice scrolling
    (setq scroll-margin 0
          scroll-conservatively 100000
          scroll-preserve-screen-position 1)


    (menu-bar-mode t)
    (tool-bar-mode 0)

    (which-function-mode t)
    (blink-cursor-mode -1)

    ;; (global-linum-mode t)
    (setq linum-format " %2d ")



#+end_src

** ModeLine
*** Spaceline
#+begin_src emacs-lisp :tangle yes
  (use-package spaceline-config
    :ensure spaceline
    :init
    (setq ns-use-srgb-colorspace nil)
    :config
    (spaceline-spacemacs-theme)
    (setq powerline-default-separator 'arrow)
;    (setq powerline-default-separator 'wave)
;    (setq powerline-height 20)
    (setq spaceline-workspace-numbers-unicode t)
    (setq spaceline-window-numbers-unicode t)
    )
#+end_src
*** COMMENT Face for window-numbering
#+begin_src emacs-lisp :tangle yes
      (set-face-attribute 'window-numbering-face nil
                          :background "cyan"
                          :foreground "black"
                          :weight 'semi-bold )
#+end_src

*** COMMENT SmartModeline
#+begin_src emacs-lisp :tangle yes
      (use-package smart-mode-line :ensure t)
      (setq sml/show-client t)
      (setq sml/show-eol t)
      (setq sml/show-frame-identification t)

  (customize-set-variable 'sml/hidden-modes (quote (" hl-p" " Helm" " skewer")))
  (customize-set-variable 'sml/show-file-name t)
  (customize-set-variable 'sml/use-projectile-p (quote before-prefixes))
  (setq sml/theme 'dark)
  (sml/setup)


#+end_src

** Themes
*** COMMENT Moe-dark
#+begin_src emacs-lisp :tangle yes
    (defun my-moe-light ()
      (interactive)
      (setq sml/theme 'light)
      (sml/setup)
      (setq moe-theme-mode-line-color 'cyan)
      (moe-light)
      )

    (defun my-moe-dark ()
      (interactive)
      (moe-dark)
      (setq sml/theme 'dark)
      (sml/setup)
      ;; (setq moe-theme-mode-line-color 'green)
      )

    ;; Theme customization
    (use-package moe-theme :ensure t)
    (require 'moe-theme)
    (my-moe-dark)
    ;; Available colors: blue, orange, magenta, yellow, purple, red, cyan, w/b.

    (set-face-attribute 'default nil :background nil)
    (set-face-attribute 'cursor nil :background "white")
    (set-face-attribute 'org-block-begin-line nil :background "#303030" :foreground "#999")
    (set-face-attribute 'org-block-end-line nil :inherit 'default :background "#303030" :foreground "#999")
    (set-face-attribute 'org-meta-line nil :inherit font-lock-comment-face)

  (after 'js2-mode
    (set-face-attribute 'js2-external-variable nil :foreground "orange red"))

#+end_src

*** COMMENT Tomorrow
#+begin_src emacs-lisp :tangle yes
(load-theme 'sanityinc-tomorrow-eighties t)
(setq default-frame-alist '((cursor-color . "#f2777a")))

(set-face-attribute 'org-level-1 nil :height 1.3)
(set-face-attribute 'org-level-2 nil :height 1.2)
(set-face-attribute 'org-level-3 nil :height 1.1 :foreground "#69C031")

(set-face-attribute 'org-level-3 nil  :foreground "#69C031")

#+end_src

*** COMMENT Atelier Dune Light
#+begin_src emacs-lisp :tangle yes
(load-theme 'base16-atelierdune-light t)
(load-theme 'smart-mode-line-light t)
; (load-theme 'base16-solarized-light t)
#+end_src

*** COMMENT Leuven
#+begin_src emacs-lisp :tangle yes
(load-theme 'leuven t)
#+end_src

*** Material
#+begin_src emacs-lisp :tangle yes
  (load-theme 'material)
#+end_src

*** COMMENT Solarized Light
#+begin_src emacs-lisp :tangle yes
(setq solarized-use-less-bold t)
(setq solarized-high-contrast-mode-line t)

  (load-theme 'solarized-light)
#+end_src

** COMMENT Font Lock speed (performance improvements with big files )
#+begin_src emacs-lisp :tangle yes
    ;;;;;;;;;;;;;;;;;;
    ;; Font lock speed
    ;;;;;;;;;;;;;;;;;;

    (setq font-lock-support-mode 'jit-lock-mode)
    (setq jit-lock-stealth-time
          16
          jit-lock-defer-contextually nil
          jit-lock-stealth-nice 0.5
          jit-lock-defer-time 0.05)

    (setq font-lock-maximum-decoration 0)
#+end_src

* Override
  #+begin_src emacs-lisp :tangle yes
    (add-hook
     'after-init-hook
     (lambda ()
       (after 'auto-complete
         (ac-set-trigger-key nil))
       ))

    (define-key  emacs-lisp-mode-map (kbd "C-M-x") nil)

    ;; (bind-key "C-f" 'forward-char)
    ;; (bind-key "C-b" 'backward-char)
    ;; (bind-key "C-j" 'newline-and-indent)

#+end_src


